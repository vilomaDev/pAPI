"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2475],{2144:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=r(3117),n=(r(7294),r(3905));const i={title:"Reordering",description:"Conceptual guide to relations reordering in the Database",tags:["database","relations","reordering"]},o=void 0,l={unversionedId:"docs/core/database/relations/reordering",id:"docs/core/database/relations/reordering",title:"Reordering",description:"Conceptual guide to relations reordering in the Database",source:"@site/docs/docs/01-core/database/01-relations/reordering.mdx",sourceDirName:"docs/01-core/database/01-relations",slug:"/docs/core/database/relations/reordering",permalink:"/docs/core/database/relations/reordering",draft:!1,editUrl:"https://github.com/strapi/strapi/tree/main/docs/docs/docs/01-core/database/01-relations/reordering.mdx",tags:[{label:"database",permalink:"/tags/database"},{label:"relations",permalink:"/tags/relations"},{label:"reordering",permalink:"/tags/reordering"}],version:"current",frontMatter:{title:"Reordering",description:"Conceptual guide to relations reordering in the Database",tags:["database","relations","reordering"]},sidebar:"docs",previous:{title:"Introduction",permalink:"/database"},next:{title:"Transactions",permalink:"/docs/core/database/transactions"}},s={},d=[{value:"Code location",id:"code-location",level:2},{value:"How is the order stored in DB?",id:"how-is-the-order-stored-in-db",level:2},{value:"Many to many (Addresses &lt;-&gt; Categories)",id:"many-to-many-addresses---categories",level:3},{value:"One to one (Kitchensinks &lt;-&gt; Tags)",id:"one-to-one-kitchensinks---tags",level:3},{value:"One way relation (Restaurants &lt;-&gt; Categories)",id:"one-way-relation-restaurants---categories",level:3},{value:"How to reorder relations in the DB layer",id:"how-to-reorder-relations-in-the-db-layer",level:2},{value:"How does relations reordering work?",id:"how-does-relations-reordering-work",level:2},{value:"Simple example",id:"simple-example",level:3},{value:"Complex example",id:"complex-example",level:3},{value:"Algorithm steps",id:"algorithm-steps",level:3}],p={toc:d};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Strapi allows you to reorder a relation list."),(0,n.kt)("img",{src:"/img/database/reordering.png",alt:"An example of reordering in the CM"}),(0,n.kt)("p",null,"This reordering feature is available in the Content Manager and the API."),(0,n.kt)("h2",{id:"code-location"},"Code location"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"packages/core/database/lib/entity-manager/relations-orderer.js")),(0,n.kt)("h2",{id:"how-is-the-order-stored-in-db"},"How is the order stored in DB?"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We store the order value of the relation in an ",(0,n.kt)("inlineCode",{parentName:"li"},"order")," field."),(0,n.kt)("li",{parentName:"ul"},"For bidirectional relations, we store the order value of the other side in an ",(0,n.kt)("inlineCode",{parentName:"li"},"inverse_order")," field.")),(0,n.kt)("p",null,"We store order values for all type of relations, except for:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Polymorphic relations (too complicated to implement)."),(0,n.kt)("li",{parentName:"ul"},"One to one relations (as there is only one relation per pair)")),(0,n.kt)("h3",{id:"many-to-many-addresses---categories"},"Many to many (Addresses <-> Categories)"),(0,n.kt)("img",{src:"/img/database/m2m-example.png",alt:"many to many relation"}),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"category_order")," is the order value of the categories relations in an address entity."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"address_order")," is the order value of the addresses relations in a category entity.")),(0,n.kt)("h3",{id:"one-to-one-kitchensinks---tags"},"One to one (Kitchensinks <-> Tags)"),(0,n.kt)("img",{src:"/img/database/o2o-example.png",alt:"one to one relation"}),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"there is no ",(0,n.kt)("inlineCode",{parentName:"li"},"order")," fields as there is only one relation per pair.")),(0,n.kt)("h3",{id:"one-way-relation-restaurants---categories"},"One way relation (Restaurants <-> Categories)"),(0,n.kt)("p",null,"Where a restaurant has many categories:"),(0,n.kt)("img",{src:"/img/database/mw-example.png",alt:"many way relation"}),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"category_order")," is the order value of the categories relations in a restaurant entity."),(0,n.kt)("li",{parentName:"ul"},"There is no ",(0,n.kt)("inlineCode",{parentName:"li"},"restaurant_order")," as it is a one way relation.")),(0,n.kt)("h2",{id:"how-to-reorder-relations-in-the-db-layer"},"How to reorder relations in the DB layer"),(0,n.kt)("p",null,"See more on ",(0,n.kt)("a",{parentName:"p",href:"https://docs.strapi.io/dev-docs/api/rest/relations#connect"},"Strapi Docs")),(0,n.kt)("p",null,"The database layer should receive a payload shown below:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"  category: {\n    connect: [\n      { id: 6, position: { after: 1} },    // It should be after relation id=1\n      { id: 8, position: { end: true }},   // It should be at the end\n    ],\n    disconnect: [\n      { id: 4 }\n    ]\n  }\n")),(0,n.kt)("h2",{id:"how-does-relations-reordering-work"},"How does relations reordering work?"),(0,n.kt)("p",null,"We use fractional indexing. This means that we use decimal numbers to order the relations. See the following diagrams below for a more detailed understanding."),(0,n.kt)("h3",{id:"simple-example"},"Simple example"),(0,n.kt)("img",{src:"/img/database/reordering-algo-1.png",alt:"An example of reordering in the CM"}),(0,n.kt)("h3",{id:"complex-example"},"Complex example"),(0,n.kt)("img",{src:"/img/database/reordering-algo-2.png",alt:"An example of reordering in the CM"}),(0,n.kt)("h3",{id:"algorithm-steps"},"Algorithm steps"),(0,n.kt)("p",null,"From the ",(0,n.kt)("inlineCode",{parentName:"p"},"connect")," array:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"For every element, ",(0,n.kt)("strong",{parentName:"li"},"load relations by id"),", ",(0,n.kt)("strong",{parentName:"li"},"from fields ",(0,n.kt)("inlineCode",{parentName:"strong"},"after")," or ",(0,n.kt)("inlineCode",{parentName:"strong"},"before")),"."),(0,n.kt)("li",{parentName:"ul"},"Start computing based on the ",(0,n.kt)("inlineCode",{parentName:"li"},"after")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"before")," relations:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Initialize")," with after/before relations (",(0,n.kt)("strong",{parentName:"li"},"step 1"),"). Let's call these ones ",(0,n.kt)("strong",{parentName:"li"},"init relations.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Apply the updates")," from the ",(0,n.kt)("inlineCode",{parentName:"li"},"connect")," array, ",(0,n.kt)("strong",{parentName:"li"},"sequentially"),".",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"If the update is of type ",(0,n.kt)("inlineCode",{parentName:"li"},"before"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Place the element with the given ",(0,n.kt)("inlineCode",{parentName:"li"},"id")," ",(0,n.kt)("strong",{parentName:"li"},"before")," the specified element in the list."),(0,n.kt)("li",{parentName:"ul"},"If the specified element is an ",(0,n.kt)("inlineCode",{parentName:"li"},"init relation"),", place the element in between that relation and the one before it.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"To determine the order value, ",(0,n.kt)("strong",{parentName:"li"},"order = beforeRelation.order - 0.5"),". This ensures the element is placed before the ",(0,n.kt)("inlineCode",{parentName:"li"},"before")," relation and after the one before it."))),(0,n.kt)("li",{parentName:"ul"},"Else ",(0,n.kt)("strong",{parentName:"li"},"order = beforeRelation.order")))),(0,n.kt)("li",{parentName:"ul"},"If the update is of type ",(0,n.kt)("inlineCode",{parentName:"li"},"after"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Place the element with the given ",(0,n.kt)("inlineCode",{parentName:"li"},"id")," ",(0,n.kt)("strong",{parentName:"li"},"after")," the specified element in the list."),(0,n.kt)("li",{parentName:"ul"},"If the specified element is an ",(0,n.kt)("inlineCode",{parentName:"li"},"init relation"),", place the element in between that relation and the one after it.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"To determine the order value, ",(0,n.kt)("strong",{parentName:"li"},"order = beforeRelation.order + 0.5"),". This ensures the element is placed before the ",(0,n.kt)("inlineCode",{parentName:"li"},"after")," relation and before the one after it."))),(0,n.kt)("li",{parentName:"ul"},"Else ",(0,n.kt)("strong",{parentName:"li"},"order = beforeRelation.order")))),(0,n.kt)("li",{parentName:"ul"},"If the update is of type ",(0,n.kt)("inlineCode",{parentName:"li"},"end"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Place at the ",(0,n.kt)("strong",{parentName:"li"},"end"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"If placing after an init relation: ",(0,n.kt)("strong",{parentName:"li"},"order = lastRelation.order + 0.5")),(0,n.kt)("li",{parentName:"ul"},"Else ",(0,n.kt)("strong",{parentName:"li"},"order = lastRelation.order")))))),(0,n.kt)("li",{parentName:"ul"},"If the update is of type ",(0,n.kt)("inlineCode",{parentName:"li"},"start"),":\n-Place at the ",(0,n.kt)("strong",{parentName:"li"},"start"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"order = 0.5")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"before/after"),": If the ",(0,n.kt)("strong",{parentName:"li"},"id does not exist in the current array"),", ",(0,n.kt)("strong",{parentName:"li"},"throw an error")),(0,n.kt)("li",{parentName:"ul"},"If an ",(0,n.kt)("strong",{parentName:"li"},"id")," was ",(0,n.kt)("strong",{parentName:"li"},"already in this array, remove the previous one")))))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Grouping by the order value"),", and ignoring init relations",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Recalculate order values for each group, so there are no repeated numbers & they keep the same order.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Example : ","[ {id: 5 , order: 1.5}, {id: 3, order: 1.5 } ]"," \u2192 ","[ {id: 5 , order: 1.33}, {id: 3, order: 1.66 } ]"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Insert values in the database")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Update database order based on their order position.")," (using ROW_NUMBER() clause)")))),(0,n.kt)("p",null,"From the disconnect array:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Delete the relations from the database."),(0,n.kt)("li",{parentName:"ul"},"Reorder the remaining elements in the database based on their position, using ROW_NUMBER() clause.")))}m.isMDXComponent=!0},3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>c});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),d=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(r),c=n,k=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return r?a.createElement(k,o(o({ref:t},p),{},{components:r})):a.createElement(k,o({ref:t},p))}));function c(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var d=2;d<i;d++)o[d]=r[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"}}]);